<?xml version="1.0"?>
<doc>
    <assembly>
        <name>gems</name>
    </assembly>
    <members>
        <member name="T:gems.Commands.DeleteFigureCommand">
            <summary>
            Command to delete figure
            </summary>
        </member>
        <member name="P:gems.Commands.DeleteFigureCommand.Id">
            <summary>
            Id of the figure to delete
            </summary>
        </member>
        <member name="T:gems.Commands.DeleteFigureCommandHandler">
            <summary>
            Class implementing figure deleting command
            </summary>
        </member>
        <member name="M:gems.Commands.DeleteFigureCommandHandler.#ctor(Gems.SqliteDb.Db.FigureDbContext)">
            <summary>
            Class implementing figure deleting command
            </summary>
        </member>
        <member name="M:gems.Commands.DeleteFigureCommandHandler.Execute(gems.Commands.DeleteFigureCommand)">
            <summary>
            Deletes figure by id from command
            </summary>
            <param name="command"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:gems.Commands.PostFigureCommand">
            <summary>
            Command to create figure
            </summary>
        </member>
        <member name="P:gems.Commands.PostFigureCommand.Geometry">
            <summary>
            Holds geometry object
            </summary>
        </member>
        <member name="T:gems.Commands.PostFigureCommandHandler">
            <summary>
            Class implementing figure creation
            </summary>
        </member>
        <member name="M:gems.Commands.PostFigureCommandHandler.#ctor(Gems.SqliteDb.Db.FigureDbContext)">
            <summary>
            Class implementing figure creation
            </summary>
        </member>
        <member name="M:gems.Commands.PostFigureCommandHandler.Execute(gems.Commands.PostFigureCommand)">
            <summary>
            Creates new figure in repository from command figure
            </summary>
            <param name="command"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:gems.Commands.PutFigureCommand">
            <summary>
            Command to update figure
            </summary>
        </member>
        <member name="T:gems.Commands.PutFigureCommandHandler">
            <summary>
            Class implementing figure updating
            </summary>
        </member>
        <member name="M:gems.Commands.PutFigureCommandHandler.#ctor(Gems.SqliteDb.Db.FigureDbContext)">
            <summary>
            Class implementing figure updating
            </summary>
        </member>
        <member name="M:gems.Commands.PutFigureCommandHandler.Execute(gems.Commands.PutFigureCommand)">
            <summary>
            Updates figure by id with figure from command
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:gems.Controllers.FiguresController">
            <summary>
            Implements WebApi controllers
            </summary>
            <param name="logger"></param>
            <param name="calculateDispatcher"></param>
            <param name="commandDispatcher"></param>
            <param name="queryDispatcher"></param>
        </member>
        <member name="M:gems.Controllers.FiguresController.#ctor(Microsoft.Extensions.Logging.ILogger{gems.Controllers.FiguresController},gems.common.Geometry.Calculators.ICalculateDispatcher,gems.CQRS.ICommandDispatcher,gems.CQRS.IQueryDispatcher)">
            <summary>
            Implements WebApi controllers
            </summary>
            <param name="logger"></param>
            <param name="calculateDispatcher"></param>
            <param name="commandDispatcher"></param>
            <param name="queryDispatcher"></param>
        </member>
        <member name="M:gems.Controllers.FiguresController.GetFigures">
            <summary>
            Returns all figures
            </summary>
            <returns></returns>
        </member>
        <member name="M:gems.Controllers.FiguresController.GetFigure(System.Int64)">
             <summary>
             Calculates square for figure with requested Id.
             </summary>
            <remarks>
             
                 GET /api/figure/2
            
             </remarks>
             <response code="200">Identificator of new figure</response>
        </member>
        <member name="M:gems.Controllers.FiguresController.PutFigure(System.Int64,gems.common.Geometry.Figures.IFigure)">
             <summary>
             Accepts request body content as figure ("circle" and "triangle") and updates data in persistent storage.
             </summary>
            <remarks>
             
             Circle:
            
                 POST /api/figure/1
                 {
                     "circle": 
                     {
                         "center": {"x": 2, "y": 2},
                         "radius": 10
                     }
                 }
            
             Triangle:
            
                 POST /api/figure/2
                 {
                     "triangle": 
                     {
                         "a": {"x": 0, "y": 0},
                         "b": {"x": 0, "y": 3},
                         "c": {"x": 4, "y": 0}
                     }
                 }
            
             </remarks>
             <response code="204"></response>
        </member>
        <member name="M:gems.Controllers.FiguresController.PostFigure(gems.common.Geometry.Figures.IFigure)">
             <summary>
             Accepts request body content as figure ("circle" and "triangle") and saves data in persistent storage.
             </summary>
            <remarks>
             
             Circle:
            
                 POST /api/figure
                 {
                     "circle": 
                     {
                         "center": {"x": 2, "y": 2},
                         "radius": 10
                     }
                 }
            
             Triangle:
            
                 POST /api/figure
                 {
                     "triangle": 
                     {
                         "a": {"x": 0, "y": 0},
                         "b": {"x": 0, "y": 3},
                         "c": {"x": 4, "y": 0}
                     }
                 }
            
             </remarks>
             <response code="200">Identificator of new figure</response>
        </member>
        <member name="M:gems.Controllers.FiguresController.DeleteFigure(System.Int64)">
             <summary>
             Deletes figure with requested Id from persistent storage.
             </summary>
            <remarks>
             
                 DELETE /api/figure/2
            
             </remarks>
             <response code="200">Identificator of new figure</response>
        </member>
        <member name="T:gems.CQRS.CommandDispatcher">
            <summary>
            Iplementation of the class to work with query handlers
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:gems.CQRS.CommandDispatcher.#ctor(System.IServiceProvider)">
            <summary>
            Iplementation of the class to work with query handlers
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:gems.CQRS.CommandDispatcher.Execute``1(``0)">
            <summary>
            Gets correct handler by TQuery and executes it
            </summary>
            <typeparam name="TCommand"></typeparam>
            <param name="command"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:gems.CQRS.ICommand">
            <summary>
            Represent command to update data
            </summary>
        </member>
        <member name="T:gems.CQRS.ICommandDispatcher">
            <summary>
            Interface to operate with ICommand handler
            </summary>
        </member>
        <member name="M:gems.CQRS.ICommandDispatcher.Execute``1(``0)">
            <summary>
            Gets correct handler by TQuery and executes it
            </summary>
            <typeparam name="TCommand"></typeparam>
            <param name="command"></param>
        </member>
        <member name="T:gems.CQRS.ICommandHandler`1">
            <summary>
            Represents handler for IQuery 
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="M:gems.CQRS.ICommandHandler`1.Execute(`0)">
            <summary>
            ICommand executor, it accepts ICommand argument query
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:gems.CQRS.IQuery`1">
            <summary>
            Represents query to get data
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:gems.CQRS.IQueryDispatcher">
            <summary>
            Interface to operate with IQuery handler
            </summary>
        </member>
        <member name="M:gems.CQRS.IQueryDispatcher.Execute``2(``0)">
            <summary>
            Gets correct handler by TQuery, executes it and returns result
            </summary>
            <typeparam name="TQuery"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:gems.CQRS.IQueryHandler`2">
            <summary>
            Represents handler for IQuery 
            </summary>
            <typeparam name="TQuery"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:gems.CQRS.IQueryHandler`2.Execute(`0)">
            <summary>
            IQuery executor, it accepts IQuery argument query and returns TResult
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:gems.CQRS.QueryDispatcher">
            <summary>
            Operates with query handlers
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:gems.CQRS.QueryDispatcher.#ctor(System.IServiceProvider)">
            <summary>
            Operates with query handlers
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:gems.CQRS.QueryDispatcher.Execute``2(``0)">
            <summary>
            Gets correct handler by TQuery, executes it and returns result
            </summary>
            <typeparam name="TQuery"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="query"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:gems.Program">
            <summary>
            The entry point of the class 
            </summary>
        </member>
        <member name="M:gems.Program.Main(System.String[])">
            <summary>
            Entry point of the app
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:gems.Program.CreateHostBuilder(System.String[])">
            <summary>
            Configure application
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:gems.Queries.GetFigureQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:gems.Queries.GetFigureQuery.Id">
            <summary>
             
            </summary>
        </member>
        <member name="T:gems.Queries.GetFigureQueryHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:gems.Queries.GetFigureQueryHandler.#ctor(Gems.SqliteDb.Db.FigureDbContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:gems.Queries.GetFigureQueryHandler.Execute(gems.Queries.GetFigureQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:gems.Queries.GetFiguresQuery">
            <summary>
            
            </summary>
        </member>
        <member name="T:gems.Queries.GetFiguresQueryHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:gems.Queries.GetFiguresQueryHandler.#ctor(Gems.SqliteDb.Db.FigureDbContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:gems.Queries.GetFiguresQueryHandler.Execute(gems.Queries.GetFiguresQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:gems.Startup">
            <summary>
            Startup class, used to configure application during startup
            </summary>
        </member>
        <member name="M:gems.Startup.#ctor">
            <summary>
            Startup class, used to configure application during startup
            </summary>
        </member>
        <member name="M:gems.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:gems.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Gems.SqliteDb.Db.FigureDbContext)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="figureContext"></param>
        </member>
    </members>
</doc>
